<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="True" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="untitled" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$stimuli" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="image" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="C:/Users/mattp/Pictures/image (9).png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.5, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <ImageComponent name="image_2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="C:/Users/mattp/Pictures/image (10).png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="image_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.5, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$corrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="total_trials = 0&amp;#10;avg_acc = -1&amp;#10;count_acc = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="total_trials = 0;&amp;#10;avg_acc = (- 1);&amp;#10;count_acc = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="total_trials = (total_trials + 1);&amp;#10;count_acc = (count_acc + key_resp.corr);&amp;#10;avg_acc = (count_acc / total_trials);&amp;#10;if ((total_trials &gt;= 3)) {&amp;#10;    if ((avg_acc &gt;= 0.8)) {&amp;#10;        cleared_blocks = (cleared_blocks + 1);&amp;#10;    }&amp;#10;    trainingBlock.finished = true;&amp;#10;    total_trials = 0;&amp;#10;    count_acc = 0;&amp;#10;}&amp;#10;if ((cleared_blocks === 5)) {&amp;#10;    trials.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="total_trials = total_trials + 1&amp;#10;count_acc = count_acc + key_resp.corr&amp;#10;avg_acc = count_acc/total_trials&amp;#10;&amp;#10;&amp;#10;if(total_trials &gt;= 3):&amp;#10;    if(avg_acc &gt;= 0.80):&amp;#10;        cleared_blocks = cleared_blocks + 1&amp;#10;    trainingBlock.finished = True&amp;#10;    total_trials = 0&amp;#10;    count_acc = 0&amp;#10;if(cleared_blocks == 5):&amp;#10;    trials.finished = True" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="feedback">
      <RoutineSettingsComponent name="feedback" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="feedback" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="fb_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="fb_text = &quot;no key_resp component found - look at the Std out window for info&quot;;&amp;#10;fb_col = &quot;black&quot;;&amp;#10;try {&amp;#10;    if (key_resp.corr) {&amp;#10;        fb_text = &quot;Correct!&quot;;&amp;#10;        fb_col = &quot;green&quot;;&amp;#10;    } else {&amp;#10;        fb_text = &quot;Incorrect&quot;;&amp;#10;        fb_col = &quot;red&quot;;&amp;#10;    }&amp;#10;} catch(e) {&amp;#10;    console.log(&quot;Make sure that you have:\n1. a routine with a keyboard component in it called \&quot;key_resp\&quot;\n 2. In the key_Resp component in the \&quot;data\&quot; tab select \&quot;Store Correct\&quot;.\n in the \&quot;Correct answer\&quot; field use \&quot;$corrAns\&quot; (where corrAns is a column header in your conditions file indicating the correct key press&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the key press was correct or not.&amp;#10;# This routine will need to follow another routine with a &amp;#10;# key response component in it called &quot;key_resp&quot; &amp;#10;# and the &quot;store correct&quot; option enabled. &amp;#10;# If your experiment is missing that you will &amp;#10;# not receive feedback and an error message will be displayed.&amp;#10;&amp;#10;# If a key response component has been added and feedback is functioning.&amp;#10;# 1. remove lines 12, 13, 15, 22 and 23.&amp;#10;# 2. dedent lines 16 to 21&amp;#10;&amp;#10;fb_text = 'no key_resp component found - look at the Std out window for info'&amp;#10;fb_col = 'black'&amp;#10;&amp;#10;try:&amp;#10;    if key_resp.corr:&amp;#10;        fb_text = 'Correct!'&amp;#10;        fb_col = 'green'&amp;#10;    else:&amp;#10;        fb_text = 'Incorrect'&amp;#10;        fb_col = 'red'&amp;#10;except:&amp;#10;    print('Make sure that you have:\n1. a routine with a keyboard component in it called &quot;key_resp&quot;\n 2. In the key_Resp component in the &quot;data&quot; tab select &quot;Store Correct&quot;.\n in the &quot;Correct answer&quot; field use &quot;$corrAns&quot; (where corrAns is a column header in your conditions file indicating the correct key press')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fb_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="fb" plugin="None">
        <Param val="$fb_col" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fb" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$fb_text" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="feedback_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$'Response time was: ' + str(resp.time[0])" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="routine_1">
      <RoutineSettingsComponent name="routine_1" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="routine_1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="rt_fb_code2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="fb_text = &quot;no mouse component found - look at the Std out window for info&quot;;&amp;#10;try {&amp;#10;    fb_text = ((&quot;RT: &quot; + (util.round((mouse.time.slice((- 1))[0] * 1000)) / 1000).toString()) + &quot; seconds&quot;);&amp;#10;} catch(e) {&amp;#10;    console.log(&quot;Make sure that you have:\n1. a routine with a mouse component in it called \&quot;mouse\&quot;\n2. that data is set to store \&quot;on click\&quot;&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Provide feedback on the response time of a mouse/touch response&amp;#10;# This routine will need to follow another routine with a &amp;#10;# mouse response component in it called &quot;mouse&quot; &amp;#10; &amp;#10;# If your experiment is missing that you will &amp;#10;# not receive feedback and an error message will be displayed.&amp;#10;&amp;#10;# If a mouse component has been added and feedback is functioning.&amp;#10;# 1. remove lines 12, 13, 15, 17 and 18.&amp;#10;# 2. dedent line 16&amp;#10;&amp;#10;fb_text = 'no mouse component found - look at the Std out window for info'&amp;#10;&amp;#10;&amp;#10;try:&amp;#10;    fb_text = 'RT: ' + str(round(mouse.time[-1]*1000)/1000) + ' seconds'#multiplying and dividing by 1000 for online compatibility (Math.Round in JS rounds to the nearest integer rather than rounding floats to a decimal place)&amp;#10;except:&amp;#10;    print('Make sure that you have:\n1. a routine with a mouse component in it called &quot;mouse&quot;\n2. that data is set to store &quot;on click&quot;')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="rt_fb_code2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="rt_fb2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="rt_fb2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$fb_text" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="feedback_2">
      <RoutineSettingsComponent name="feedback_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="feedback_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="fb_code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="fb_text = &quot;no key_resp component found - look at the Std out window for info&quot;;&amp;#10;fb_col = &quot;black&quot;;&amp;#10;try {&amp;#10;    if (key_resp.corr) {&amp;#10;        fb_text = `Correct! ${util.pad(Number.parseFloat(avg_acc).toFixed(2), 1)}`;&amp;#10;        fb_col = &quot;green&quot;;&amp;#10;    } else {&amp;#10;        fb_text = `Incorrect! ${util.pad(Number.parseFloat(avg_acc).toFixed(2), 1)}`;&amp;#10;        fb_col = &quot;red&quot;;&amp;#10;    }&amp;#10;    debug_text = `${cleared_blocks} cleared&amp;#10;trial ${total_trials}`&amp;#10;;&amp;#10;} catch(e) {&amp;#10;    console.log(&quot;Make sure that you have:\n1. a routine with a keyboard component in it called \&quot;key_resp\&quot;\n 2. In the key_Resp component in the \&quot;data\&quot; tab select \&quot;Store Correct\&quot;.\n in the \&quot;Correct answer\&quot; field use \&quot;$corrAns\&quot; (where corrAns is a column header in your conditions file indicating the correct key press&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Check if the key press was correct or not.&amp;#10;# This routine will need to follow another routine with a &amp;#10;# key response component in it called &quot;key_resp&quot; &amp;#10;# and the &quot;store correct&quot; option enabled. &amp;#10;# If your experiment is missing that you will &amp;#10;# not receive feedback and an error message will be displayed.&amp;#10;&amp;#10;# If a key response component has been added and feedback is functioning.&amp;#10;# 1. remove lines 12, 13, 15, 22 and 23.&amp;#10;# 2. dedent lines 16 to 21&amp;#10;&amp;#10;fb_text = 'no key_resp component found - look at the Std out window for info'&amp;#10;fb_col = 'black'&amp;#10;&amp;#10;try:&amp;#10;    if key_resp.corr:&amp;#10;        fb_text = f'Correct! {avg_acc:.2f}'&amp;#10;        fb_col = 'green'&amp;#10;    else:&amp;#10;        fb_text = f'Incorrect! {avg_acc:.2f}'&amp;#10;        fb_col = 'red'&amp;#10;    debug_text = f'{cleared_blocks} cleared \n trial {total_trials}'&amp;#10;except:&amp;#10;    print('Make sure that you have:\n1. a routine with a keyboard component in it called &quot;key_resp&quot;\n 2. In the key_Resp component in the &quot;data&quot; tab select &quot;Store Correct&quot;.\n in the &quot;Correct answer&quot; field use &quot;$corrAns&quot; (where corrAns is a column header in your conditions file indicating the correct key press')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fb_code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="fb_2" plugin="None">
        <Param val="$fb_col" valType="color" updates="set every repeat" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fb_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$fb_text + '\n' + debug_text" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="routine">
      <RoutineSettingsComponent name="routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_2" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="15" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="success" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="routine_2">
      <RoutineSettingsComponent name="routine_2" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="routine_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text_3" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="new block&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_2" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="cleared_blocks = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="cleared_blocks = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="routine_2"/>
    <LoopInitiator loopType="TrialHandler" name="trainingBlock">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('stimuli', 'pipi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 pipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 pibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 bipi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 bibi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pipe(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 pipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pibe(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 pibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bipe(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 bipe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bibe(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 bibe(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pepi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 pepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'pebi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 pebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bepi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 bepi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 pipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipo(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 pibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibo(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 bipo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipo(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 bibo(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibo(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 pipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pipe(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 pibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pibe(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 bipe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bipe(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 bibe(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bibe(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 pepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pepi(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 pebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'pebi(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 bepi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bepi(incorrect)                 bebi(correct)'), ('corrAns', 'right')]), OrderedDict([('stimuli', 'bebi(correct)                 bebi(incorrect)'), ('corrAns', 'left')]), OrderedDict([('stimuli', 'bebi(incorrect)                 bebi(correct)'), ('corrAns', 'right')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stims.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="3" valType="num"/>
      <Param name="name" updates="None" val="trainingBlock" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <Routine name="feedback_2"/>
    <LoopTerminator name="trainingBlock"/>
    <LoopTerminator name="trials"/>
    <Routine name="routine"/>
  </Flow>
</PsychoPy2experiment>
